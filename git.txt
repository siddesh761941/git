Git
  - Version control system
  - Control & tracking of changes over time

GitHub
   - Development platform
   - Cloud hosting & collaboration provider

How Git works
   - Folder => Working directory using git
   - .git(hidden) Repository
      - Contains two areas
         - Staging Area(Index File)
         - Commits (Objects Folder)

   - Git = Tracking changes - NOT storing files again and again.

Convert Working directory to Repositiry
   - git init

Adding untracked files to staging area
   - git add .

Adding staged changes to commit area
   - git commit -m "<message>"   

Command to access all out commits in a branch
   - git log
  
Listing out all the branches
   - git brach

Creating a new branch
   - git brach <branch_name>

Changing from onr branch to another branch
   - git checkout <brach_name>   

Merging branch
   - git merge <branch-to-be-merged-with-current-branch>

Head & detach head

Deleting a working directory files
   - git rm <files>

Undoing unstaged change
   -git checkout .
   -git checkout <file>

Deleting untracked files
   - git clean -df

Undoing staged change
   - git reset <file> | git restore --staged <File>
     git restore <file> | git checkout <file>

Undoing commitng change
   - N = no_of_commit_to_reset
   - git reset --soft HEAD~<N>
       - moves commit area to staging area
   - git reset HEAD~<N>
       - moves commit area to unstaged   
   - git reset --hard HEAD~<N>
       - moves commit area to restore changes


Deleting a branch 
   - git branch -D(forcefully)/d <branch_name(s)>

Stash
   - when you want to record the current state of the working directory 
     and the index, but want to go back to a clean working directory.

   - Commands
      - git stash
      - git list
      - git stash apply <index>
      - git stash pop <index>
      - git stash drop <index>
      - git stash clear
      - git stash push -m <stash_message>       