Git
  - Version control system
  - Control & tracking of changes over time

GitHub
   - Development platform
   - Cloud hosting & collaboration provider

How Git works
   - Folder => Working directory using git
   - .git(hidden) Repository
      - Contains two areas
         - Staging Area(Index File)
         - Commits (Objects Folder)

   - Git = Tracking changes - NOT storing files again and again.

Convert Working directory to Repositiry
   - git init

Adding untracked files to staging area
   - git add .

Adding staged changes to commit area
   - git commit -m "<message>"   

Command to access all out commits in a branch
   - git log
  
Listing out all the branches
   - git brach

Creating a new branch
   - git brach <branch_name>

Changing from onr branch to another branch
   - git checkout <brach_name>   

Merging branch
   - git merge <branch-to-be-merged-with-current-branch>

Head & detach head

Deleting a working directory files
   - git rm <files>

Undoing unstaged change
   -git checkout .
   -git checkout <file>

Deleting untracked files
   - git clean -df

Undoing staged change
   - git reset <file> | git restore --staged <File>
     git restore <file> | git checkout <file>

Undoing commitng change
   - N = no_of_commit_to_reset
   - git reset --soft HEAD~<N>
       - moves commit area to staging area
   - git reset HEAD~<N>
       - moves commit area to unstaged   
   - git reset --hard HEAD~<N>
       - moves commit area to restore changes


Deleting a branch 
   - git branch -D(forcefully)/d <branch_name(s)>

Stash
   - when you want to record the current state of the working directory 
     and the index, but want to go back to a clean working directory.

   - Commands
      - git stash
      - git stash list
      - git stash apply <index>
      - git stash pop <index>
      - git stash drop <index>
      - git stash clear
      - git stash push -m <stash_message>

Reflog

Merge
  - Merge types
     - Fast-Forward
     - Non Fast-Forward

  - Fast Forward
      - No additional commit in master (After feature branch was created).
      - Merge Moves HEAD forward but does not create new commit  

      - git merge <branch>
      - git merge --squash <branch> (moving changes from 
        <branch to be merged> to staging area of merging branch, commits
        of <branch to be merged> will NOT show in logs)

   - Non Fast-Forward (recursive)

      - Additional commits in both master & feature branch after feature branch was created
        branch was created.

      - Additional(merge) commit is created in master branch.


Rebase 
   - git-rebase - Reapply commits on top of another base tip
   - git rebase <branch from which current branch needs to be rebased>
   - Avoid using of rebase, becoz it changes comit ids

Commands
   - git merge --abort
   - git diff

Cherry-pick
   - Add specific commit to branch (HEAD)
   - copies commit with new ID
   - git cherry-pick <Commit ID>

----------------------GitHub--------------------

Making connecttion between git and github
  - git remote add origin <URL>

Pushing commits
  - git push origin <branch>

-  There is no direct connection b/w local and remote branch, there is remote branch
   tracking branch in between.

   - git push
      - local branch => remote tracking branch => Remote branch

   - git pull
      - Remote branch (fetch) => Remote tracking branch => (merge) local branch

Commands
  - git branch -a
  - git branch -vv
  - git ls-remote

